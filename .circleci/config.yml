cleanAWS: &cleanAWS
    machine: true
    steps:
    - checkout

    - run:
        name: Set AWS credentials
        command: ./scripts/aws_credentials.sh ${TYPE}

    - run:
        name: Execute ci-cleaner for AWS
        command: |
            docker run --rm -ti \
                quay.io/giantswarm/ci-cleaner:latest \
                aws \
                --access-key-id ${AWS_ACCESS_KEY_ID} \
                --secret-access-key ${AWS_SECRET_ACCESS_KEY} \
                --region ${AWS_DEFAULT_REGION}


cleanAzure: &cleanAzure
    machine: true
    steps:
    - checkout

    - run:
        name: Execute ci-cleaner for Azure
        command: |
            docker run --rm -ti \
            quay.io/giantswarm/ci-cleaner:latest \
            azure \
            --subscription-id ${AZURE_SUBSCRIPTION_ID} \
            --tenant-id ${AZURE_TENANT_ID} \
            --client-id ${AZURE_CLIENT_ID} \
            --client-secret ${AZURE_CLIENT_SECRET} \
            --location ${AZURE_LOCATION}


version: 2
jobs:
  build:
    machine: true
    steps:
    - checkout

    - run:
        name: Install architect (except when in cronjob execution)
        command: |
            if [ "${CIRCLE_USERNAME}" != "" ]; then
                wget -q $(curl -sS -H "Authorization: token $RELEASE_TOKEN" https://api.github.com/repos/giantswarm/architect/releases/tags/v1.0.0 | grep browser_download_url | head -n 1 | cut -d '"' -f 4)
                chmod +x ./architect
                ./architect version
            fi

    - run:
        name: architect build (except when in cronjob execution)
        command: test -x ./architect && ./architect build || echo "Assuming we are in a cronjob. Not building."

    - deploy:
        name: architect deploy (master only, except when in cronjob execution)
        command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
                test -x ./architect && ./architect deploy || echo "Assuming we are in a cronjob. Not deploying."
            fi

    - store_test_results:
        path: /tmp/results


  cleanAWSHost:
    environment:
      TYPE: "host"
    <<: *cleanAWS

  cleanAWSGuest:
    environment:
      TYPE: "guest"
    <<: *cleanAWS

  cleanAzure:
    <<: *cleanAzure



workflows:
  version: 2

  build:
    jobs:
    - build

  cleanup:
#    triggers:
#      - schedule:
#          cron: "21 * * * *"
#          filters:
#            branches:
#              only: master

    jobs:
    - build
    - cleanAWSGuest:
        requires:
        - build
    - cleanAWSHost:
        requires:
        - build
    - cleanAzure:
        requires:
        - build
